trigger:
  branches:
    include:
    - master
  paths:
    include:
    - Dag17/Backend/OrderBackend/*

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: Release
  projectPath: Dag17/Backend
  applicationPath: $(projectPath)/OrderBackend
  dockerRegistryServiceConnection: 'minorRegistry'
  imageRepository: 'yvds-dag20-orderbackend'
jobs:
- job:
  displayName: "Build and package"
  steps:
  - task: DotNetCoreCLI@2
    displayName: Build project
    inputs:
      command: 'build'
      projects: '$(projectPath)/**/*.csproj'
      arguments: '-c $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Run tests
    inputs:
      command: 'test'
      projects: '$(projectPath)/**/*.Test/*.csproj'
      arguments: '--no-build -c $(buildConfiguration)'
  - task: DotNetCoreCLI@2
    displayName: Publish project
    inputs:
      command: 'publish'
      publishWebProjects: false
      projects: '$(applicationPath)/*.csproj'
      arguments: '--no-build -c $(buildConfiguration) -o $(applicationPath)/obj/docker/publish'
      zipAfterPublish: false
      modifyOutputPath: false
  - task: Docker@2
    displayName: Docker build and push
    inputs:
      containerRegistry: $(dockerRegistryServiceConnection)
      repository: $(imageRepository)
      command: 'buildAndPush'
      Dockerfile: '$(applicationPath)/Dockerfile'
      tags: '1'
  - task: PublishBuildArtifacts@1
    inputs:
      PathtoPublish: '/dockerimage'
      ArtifactName: 'docker image'
      publishLocation: 'Container'
- job:
  displayName: "Run the console"
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'current'
      artifactName: 'docker image'
      targetPath: '$(Pipeline.Workspace)'
  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: 'Write-Host "Hello World"'




